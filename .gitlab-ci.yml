image: registry.gitlab.com/castlecraft/docker-craft/node-latest-headless-chrome:latest

services:
  - name: bitnami/mongodb:latest
    alias: mongo
  - name: docker:dind
    alias: docker
  - name: redis
    alias: redis

variables:
  MONGODB_USERNAME: "admin"
  MONGODB_PASSWORD: "admin"
  MONGODB_DATABASE: "test_authorization-server"

stages:
  - tests
  - pack
  - deploy
  - setup
  - docs

test_authorization_server:
  stage: tests
  variables:
    SESSION_SECRET: "secret"
    EXPIRY_DAYS: "1"
    COOKIE_MAX_AGE: "43200"
    TOKEN_VALIDITY: "3600"
    SESSION_NAME: "E2E_SESSION"
    DB_HOST: "mongo"
    DB_USER: "admin"
    DB_PASSWORD: "admin"
    DB_NAME: "authorization-server"
    BULL_QUEUE_REDIS_HOST: redis
    BULL_QUEUE_REDIS_PORT: "6379"
  before_script:
    - cd apps/authorization-server
    - npm install
  script:
    # Check Code Quality
    - npm run lint
    - npm run format:check
    # Test backend unit tests
    - npm run test:server
    # Create .env file
    - dockerize -template docker/env.tmpl:.env
    # set env variable for test
    - export NODE_ENV=test
    # Test backend e2e
    - npm run test:e2e
    # Test frontend
    - export DISPLAY=:99
    - Xvfb :0 -ac -screen 0 1024x768x24 &
    - npm run test:client
    - npm run e2e
  tags:
    - docker

test_communication_server:
  stage: tests
  before_script:
    - cd apps/communication-server
    - npm install
  script:
    # set env variable for test
    - export NODE_ENV=test
    # Check Code Quality
    - npm run lint
    - npm run format:check
    # Test backend unit tests
    - npm run test:server
    # Test backend e2e
    - npm run test:e2e
    # Test frontend
    - export DISPLAY=:99
    - Xvfb :0 -ac -screen 0 1024x768x24 &
    - npm run test:client
    - npm run e2e
  tags:
    - docker

test_identity_provider:
  stage: tests
  before_script:
    - cd apps/identity-provider
    - npm install
  script:
    # set env variable for test
    - export NODE_ENV=test
    # Check Code Quality
    - npm run lint
    - npm run format:check
    # Test backend unit tests
    - npm run test:server
    # Test backend e2e
    - npm run test:e2e
    # Test frontend
    - export DISPLAY=:99
    - Xvfb :0 -ac -screen 0 1024x768x24 &
    - npm run test:client
    - npm run e2e
  tags:
    - docker

test_infrastructure_console:
  stage: tests
  before_script:
    - cd apps/infrastructure-console
    - npm install
  script:
    # set env variable for test
    - export NODE_ENV=test
    # Check Code Quality
    - npm run lint
    - npm run format:check
    # Test backend unit tests
    - npm run test:server
    # Test backend e2e
    - npm run test:e2e
    # Test frontend
    - export DISPLAY=:99
    - Xvfb :0 -ac -screen 0 1024x768x24 &
    - npm run test:client
    - npm run e2e
  tags:
    - docker

pack_staging_authorization_server:
  image: docker
  stage: pack
  environment: staging
  only:
    - staging
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # Authorization Server
    - docker build -t authorization-server apps/authorization-server
    - docker tag authorization-server $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/authorization-server:edge
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/authorization-server

pack_staging_communication_server:
  image: docker
  stage: pack
  environment: staging
  only:
    - staging
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # Communication Server
    - docker build -t communication-server apps/communication-server
    - docker tag communication-server $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/communication-server:edge
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/communication-server

pack_staging_identity_provider:
  image: docker
  stage: pack
  environment: staging
  only:
    - staging
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # Identity Provider
    - docker build -t identity-provider apps/identity-provider
    - docker tag identity-provider $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/identity-provider:edge
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/identity-provider

pack_staging_infrastructure_console:
  image: docker
  stage: pack
  environment: staging
  only:
    - staging
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # Infrastructure Console
    - docker build -t infrastructure-console apps/infrastructure-console
    - docker tag infrastructure-console $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/infrastructure-console:edge
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/infrastructure-console

pack_production_authorization_server:
  image: docker
  stage: pack
  environment: production
  only:
    - master
  before_script:
    - apk add git
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # get latest tag for app in master branch
    # Authorization Server
    - export VERSION=$(git tag --list "authorization-server@*" --sort=-version:refname | sed -n 1p | sed -e 's#.*@\(\)#\1#')
    - docker build -t authorization-server apps/authorization-server
    - docker tag authorization-server $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/authorization-server:$VERSION
    - docker tag authorization-server $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/authorization-server:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/authorization-server

pack_production_communication_server:
  image: docker
  stage: pack
  environment: production
  only:
    - master
  before_script:
    - apk add git
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # get latest tag for app in master branch
    # Communication Server
    - export VERSION=$(git tag --list "communication-server@*" --sort=-version:refname | sed -n 1p | sed -e 's#.*@\(\)#\1#')
    - docker build -t communication-server apps/communication-server
    - docker tag communication-server $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/communication-server:$VERSION
    - docker tag communication-server $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/communication-server:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/communication-server

pack_production_identity_provider:
  image: docker
  stage: pack
  environment: production
  only:
    - master
  before_script:
    - apk add git
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # get latest tag for app in master branch
    # Idenitiy Provider
    - export VERSION=$(git tag --list "identity-provider@*" --sort=-version:refname | sed -n 1p | sed -e 's#.*@\(\)#\1#')
    - docker build -t identity-provider apps/identity-provider
    - docker tag identity-provider $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/identity-provider:$VERSION
    - docker tag identity-provider $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/identity-provider:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/identity-provider

pack_production_infrastructure_console:
  image: docker
  stage: pack
  environment: production
  only:
    - master
  before_script:
    - apk add git
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # get latest tag for app in master branch
    # Infrastructure Console
    - export VERSION=$(git tag --list "infrastructure-console@*" --sort=-version:refname | sed -n 1p | sed -e 's#.*@\(\)#\1#')
    - docker build -t infrastructure-console apps/infrastructure-console
    - docker tag infrastructure-console $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/infrastructure-console:$VERSION
    - docker tag infrastructure-console $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/infrastructure-console:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/building-blocks/infrastructure-console

deploy_staging:
  image: dtzar/helm-kubectl:2.11.0
  stage: deploy
  environment:
    name: staging
  only:
    - staging
  script:
    - ./helm-charts/deploy/deploy-staging.sh

setup_staging:
  image: python:3
  stage: setup
  only:
    - staging
  before_script:
    - pip install -q requests
  script:
    - ./scripts/setupwiz.py setup-as https://staging-accounts.castlecraft.in Administrator admin@example.com admin +919876543210 https://staging-admin.castlecraft.in
    - ./scripts/setupwiz.py add-client admin@example.com admin https://staging-admin.castlecraft.in "Identity Provider" https://staging-myaccount.castlecraft.in

pages:
  stage: docs
  only:
    - staging
  before_script:
    - npm install -g lerna
    - npm install
    - lerna clean -y
    - lerna bootstrap
  script:
    - npm install gitbook-cli -g
    - npm install typedoc -g
    # - gitbook fetch latest # fetch latest stable version
    # - gitbook install # add any requested plugins in book.json
    - gitbook build docs public # build to public path
    - npm run docs
  artifacts:
    paths:
      - public
    expire_in: 4 weeks
